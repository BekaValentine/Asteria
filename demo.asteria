module demo

import

  Foo,
  Foo as Bar,
  Foo unqualified,
  Bar unqualified using (a, b, c),
  Bar unqualified hiding (a, b, c),
  Bar renaming (d to d2)

where

class Monoid (a : Type) where
  mzero : a
  mplus : a -> a -> a

data Nat where
  Zero : Nat
  Suc (n : Nat) : Nat

type natural = Nat

add : Nat -> Nat -> Nat
add Zero    n = n
add (Suc m) n = Suc (add m n)

(+) : Nat -> Nat -> Nat
Zero    + n = n
(Suc m) + n = Suc (m + n)

instance Monoid Nat <= (Foo x) where
  mzero = Zero
  mplus x y = add x y
