_WS: /[\r\n\t ]+/
%ignore _WS
_sepby{x, sep}: x (sep x)*
_sepby0{x, sep}: _sepby{x,sep}?

////////////////  Keywords and Symbols  ////////////////

_DATA:         "data"
_WHERE:        "where"
_CASE:         "case"
_OF:           "of"
_FORALL:       "forall"
_TYPEKIND:     "Type"

_EQ:         "="
_COLON:      ":"
_ARROW:      "->"
_LAMBDA:     "\\"
_AT:         "@"
_DOT:        "."
_COMMA:      ","
_PIPE:       "|"
_DOUBLEPIPE: "||"
_LPAR:       "("
_RPAR:       ")"
_LBRACE:     "{"
_RBRACE:     "}"
_LBRACK:     "["
_RBRACK:     "]"
_SEMI:       ";"
_DOUBLESEMI: ";;"
_UNDER:      "_"
_DOLLAR:     "$"

_COMMENT:    "--" /[^\n]*/ "\n"
%ignore _COMMENT






////////////////  Names and Operators  ////////////////

VARNAME: /(?!(_|datatype|case|of|forall)\b)[a-z_][a-zA-Z0-9_]*/
CONNAME: /(?!(Type)\b)[A-Z][a-zA-Z0-9_]*/
OPERATOR: /(=>|:|->|@|,|\||;;)[~!@#$%^&*\-|+=:;<>?\/\.]+/
        | /=[~!@#$%^&*\-|+=:;<?\/\.][~!@#$%^&*\-|+=:;<>?\/\.]*/
        | /-([~!@#$%^&*\|+=:;<?\/\.][~!@#$%^&*\-|+=:;<>?\/\.]*)?/
        | /;([~!@#$%^&*\-|+=:<>?\/\.][~!@#$%^&*\-|+=:;<>?\/\.]*)?/
        | /[~!#$%^&*+<>?\/\.][~!@#$%^&*\-|+=:;<>?\/\.]*/
TERMNAME: VARNAME | _LPAR OPERATOR _RPAR

module_name: _sepby{CONNAME, _DOT}
declared_type_constructor_name: module_name _DOLLAR CONNAME
declared_constructor_name: declared_type_constructor_name _DOLLAR CONNAME
term_name_with_subnames: TERMNAME sub_termnames
_sub_term_name: _DOLLAR TERMNAME
sub_termnames: _sub_term_name*
declared_term_name: module_name _DOLLAR term_name_with_subnames





////////////////  Modules  ////////////////


module: _declaration*



////////////////  Declarations  ////////////////

// Declaration Decl
//   ::=  data Cn TVK* where ConDecl*;;    (Datatype Declaration)
//     |  x : A;;                          (Term Type Signature)
//     |  x = N;;                          (Term Equation)

_declaration: data_declaration
            | term_declaration

tyvarkindings: tyvarkinding*
tyvarkinding: _LPAR VARNAME _COLON _kind _RPAR






////////////////  Data Declarations  ////////////////

data_declaration: _DATA CONNAME tyvarkindings _WHERE constructor_declarations _DOUBLESEMI

constructor_declarations: constructor_declaration*
constructor_declaration: _PIPE CONNAME constructor_decl_type_arguments constructor_decl_arguments _COLON _type

constructor_decl_type_arguments: constructor_decl_type_argument*
constructor_decl_type_argument: _LBRACE VARNAME _COLON _kind _RBRACE

constructor_decl_arguments: constructor_decl_argument*
constructor_decl_argument: _LPAR VARNAME _COLON _type _RPAR






////////////////  Type Declaration  ////////////////

term_declaration: term_name_with_subnames _COLON _type _EQ _term _DOUBLESEMI






////////////////  Kinds  ////////////////

_kind: type_kind
     | function_kind
     | paren_kind

type_kind: _TYPEKIND

function_kind: _function_kind_left _ARROW _kind
_function_kind_left: type_kind
                | paren_kind

paren_kind: _LPAR _kind _RPAR






////////////////  Types  ////////////////

// Type A, B ::=  a              (Type Variable)
//             |  Cn(A*)         (Type Constructor)
//             |  A -> B         (Function Type)
//             |  forall TVK. B  (Forall Type)
//             |  A B            (Type Application)
//             | \a -> B         (Type Lambda)

_type: variable_type
     | constructor_type
     | function_type
     | forall_type
     | application_type
     | lambda_type
     | paren_type

variable_type: VARNAME

constructor_type: declared_type_constructor_name _LPAR constructor_type_arguments _RPAR
constructor_type_arguments: _sepby0{_type, _COMMA}

function_type: _function_type_left _ARROW _type
_function_type_left: variable_type
                   | constructor_type
                   | application_type
                   | paren_type

forall_type: _FORALL tyvarkinding _DOT _type

application_type: _application_type_left _application_type_right
_application_type_left: variable_type
                      | constructor_type
                      | application_type
                      | paren_type
_application_type_right: variable_type
                       | constructor_type
                       | paren_type

lambda_type: _LAMBDA tyvarkinding _ARROW _type

paren_type: _LPAR _type _RPAR






//////////////  Patterns  ////////////////

_pattern: variable_pattern
        | wildcard_pattern
        | constructor_pattern
        | paren_pattern

variable_pattern: VARNAME

wildcard_pattern: _UNDER

constructor_pattern: CONNAME _LPAR constructor_pattern_type_arguments _SEMI constructor_pattern_term_arguments _RPAR
_type_pattern: variable_type_pattern
             | wildcard_type_pattern
variable_type_pattern: VARNAME
wildcard_type_pattern: _UNDER
constructor_pattern_type_arguments: _sepby0{_type_pattern, _COMMA}
constructor_pattern_term_arguments: _sepby0{_pattern, _COMMA}

paren_pattern: _LPAR _pattern _RPAR






////////////////  Terms  ////////////////

// Term M, N ::=  M : A               (Type Annotation)
//             |  x                   (Variable)
//             |  Cn                  (Constructor)
//             |  \x -> M             (Lambda Abstraction)
//             |  M N                 (Function Application)
//             |  \{a} -> M           (Type Abstraction)
//             |  M {A}               (Type Instantiation)
//             |  case M* of Cls*     (Case)

_term: type_annotation_term
     | variable_term
     | declared_term
     | constructor_term
     | lambda_term
     | application_term
     | abstraction_term
     | instantiation_term
     | case_term
     | paren_term

type_annotation_term: _annotation_left _COLON _type
_annotation_left: variable_term
                | declared_term
                | constructor_term
                | application_term
                | instantiation_term
                | paren_term

variable_term: VARNAME

declared_term: declared_term_name

constructor_term: CONNAME _LPAR constructor_term_type_arguments _SEMI constructor_term_term_arguments _RPAR
constructor_term_type_arguments: _sepby0{_type, _COMMA}
constructor_term_term_arguments: _sepby0{_term, _COMMA}

lambda_term: _LAMBDA VARNAME _ARROW _term

application_term: _application_left _application_right
_application_left: variable_term
                 | declared_term
                 | constructor_term
                 | application_term
                 | instantiation_term
                 | paren_term
_application_right: variable_term
                  | declared_term
                  | constructor_term
                  | paren_term

abstraction_term: _LAMBDA _LBRACE VARNAME _RBRACE _ARROW _term

instantiation_term: _application_left _LBRACE _type _RBRACE

case_term: _CASE case_scrutinees _OF case_body
case_scrutinees: _sepby{_case_scrutinee,_PIPE}
_case_scrutinee: _term

case_body: case_clause*

// CaseClause Cls ::=  | Pat* || G -> N  (Case Clause)
case_clause: _PIPE patterns guard _ARROW _term

guard: (_DOUBLEPIPE _term)?

patterns: _sepby{_pattern,_PIPE}

paren_term: _LPAR _term _RPAR
