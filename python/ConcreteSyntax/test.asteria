module Demo importing

  Foo
  Foo as Bar
  Foo unqualified
  Bar unqualified using (a, b, c)
  Bar unqualified hiding (a, b, c)
  Bar renaming (d to d2)

where

data Foo (a : Type) where
  MkFoo : Foo a

data Exists (f : Type -> Type) where
  Witness {a : Type} (x : a) (pf : f a) : Exists f

type foo (a : Type) = Foo a

class forall (a : Type) (b : Type). (Foo a, Bar b) => Baz a b where
  foo : a -> b
  bar : a
  baz : b

x : Foo a b

x = foo x y

instance forall (a : Type) (b : Type). (Foo a, Bar b) => Baz a b where
  foo = x
  bar = y
  baz = z

x = case y of
  TODO
